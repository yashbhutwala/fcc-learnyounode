{
  "_args": [
    [
      {
        "raw": "through2-map",
        "scope": null,
        "escapedName": "through2-map",
        "name": "through2-map",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/ubuntu/workspace"
    ]
  ],
  "_from": "through2-map@latest",
  "_id": "through2-map@3.0.0",
  "_inCache": true,
  "_location": "/through2-map",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/through2-map-3.0.0.tgz_1478371847646_0.8123708353377879"
  },
  "_npmUser": {
    "name": "bryce",
    "email": "bryce@ravenwall.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "through2-map",
    "scope": null,
    "escapedName": "through2-map",
    "name": "through2-map",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/through2-map/-/through2-map-3.0.0.tgz",
  "_shasum": "a6c3026ce63b4898a997d540506b66ffd970f271",
  "_shrinkwrap": null,
  "_spec": "through2-map",
  "_where": "/home/ubuntu/workspace",
  "author": {
    "name": "Bryce B. Baril"
  },
  "bugs": {
    "url": "https://github.com/brycebaril/through2-map/issues"
  },
  "dependencies": {
    "through2": "~2.0.0",
    "xtend": "^4.0.0"
  },
  "description": "A through2 to create an Array.prototype.map analog for streams.",
  "devDependencies": {
    "stream-spigot": "~3.0.5",
    "tape": "~4.0.0",
    "terminus": "~1.0.12"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "a6c3026ce63b4898a997d540506b66ffd970f271",
    "tarball": "https://registry.npmjs.org/through2-map/-/through2-map-3.0.0.tgz"
  },
  "gitHead": "8a482d218bdf2de40bf867a1f28ffa9fa0a3b315",
  "homepage": "https://github.com/brycebaril/through2-map#readme",
  "jshintConfig": {
    "asi": true,
    "globalstrict": true,
    "validthis": true,
    "eqnull": true,
    "node": true,
    "loopfunc": true,
    "newcap": false,
    "eqeqeq": false
  },
  "keywords": [
    "streams",
    "through",
    "through2",
    "map"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "bryce",
      "email": "bryce@ravenwall.com"
    }
  ],
  "name": "through2-map",
  "optionalDependencies": {},
  "readme": "through2-map\n============\n\n[![NPM](https://nodei.co/npm/through2-map.png)](https://nodei.co/npm/through2-map/)\n\nThis is a super thin wrapper around [through2](http://npm.im/through2) that works like `Array.prototype.map` but for streams.\n\nFor when through2 is just too verbose :wink:\n\nNote you will **NOT** be able to skip chunks. This is intended for modification only. If you want filter the stream content, use either `through2` or `through2-filter`. This transform also does not have a `flush` function.\n\n**IMPORTANT:** If you return `null` from your function, the stream will end there.\n\n```js\n\nvar map = require(\"through2-map\")\n\nvar truncate = map(function (chunk) {\n  return chunk.slice(0, 10)\n})\n\n// vs. with through2:\nvar truncate = through2(function (chunk, encoding, callback) {\n  this.push(chunk.slice(0, 10))\n  return callback()\n})\n\n// Then use your map:\nsource.pipe(truncate).pipe(sink)\n\n// Additionally accepts `wantStrings` argument to convert buffers into strings\nvar stripTags = map({wantStrings: true}, function (str) {\n  // OMG don't actually use this\n  return str.replace(/<.*?>/g, \"\")\n})\n\n// Works like `Array.prototype.map` meaning you can specify a function that\n// takes up to two* arguments: fn(chunk, index)\nvar spaceout = map({wantStrings: true}, function (chunk, index) {\n  return (index % 2 == 0) ? chunk + \"\\n\\n\" : chunk\n})\n\n// vs. with through2:\nvar spaceout = through2(function (chunk, encoding, callback) {\n  if (this.index == undefined) this.index = 0\n  var buf = (this.index++ % 2 == 0) ? Buffer.concat(chunk, new Buffer(\"\\n\\n\")) : chunk\n  this.push(buf)\n  return callback()\n})\n\n```\n\n*Differences from `Array.prototype.map`:\n  * Cannot insert `null` elements into the stream without aborting.\n  * No third `array` callback argument. That would require realizing the entire stream, which is generally counter-productive to stream operations.\n  * `Array.prototype.map` doesn't modify the source Array, which is somewhat nonsensical when applied to streams.\n\nAPI\n---\n\n```\nrequire(\"through2-map\")([options,] fn)\n```\n\nCreate a `stream.Transform` instance that will call `fn(chunk, index)` on each stream segment.\n\n- - -\n\n```\nvar Tx = require(\"through2-map\").ctor([options,] fn)\n```\n\nCreate a reusable `stream.Transform` TYPE that can be called via `new Tx` or `Tx()` to create an instance.\n\n- - -\n\n```\nrequire(\"through2-map\").obj([options,] fn)\n```\n\nCreate a `through2-map` instance that defaults to `objectMode: true`.\n\n- - -\n\n```\nrequire(\"through2-map\").objCtor([options,] fn)\n```\n\nJust like ctor, but with `objectMode: true` defaulting to true.\n\nOptions\n-------\n\n  * wantStrings: Automatically call chunk.toString() for the super lazy.\n  * all other through2 options\n\nLICENSE\n=======\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/brycebaril/through2-map.git"
  },
  "scripts": {
    "test": "node test/"
  },
  "version": "3.0.0"
}
